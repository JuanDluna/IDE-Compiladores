int	PALABRA_RESERVADA	1	1
main	PALABRA_RESERVADA	1	5
(	DELIMITADOR	1	8
)	DELIMITADOR	1	9
{	DELIMITADOR	1	10
int	PALABRA_RESERVADA	2	5
x	IDENTIFICADOR	2	9
=	OPERADOR_ASIGNACION	2	11
10	NUMERO_ENTERO	2	13
;	DELIMITADOR	2	14
float	PALABRA_RESERVADA	3	5
y	IDENTIFICADOR	3	11
=	OPERADOR_ASIGNACION	3	13
20.5	NUMERO_FLOTANTE	3	15
;	DELIMITADOR	3	18
x	IDENTIFICADOR	4	5
=	OPERADOR_ASIGNACION	4	7
x	IDENTIFICADOR	4	9
+	OPERADOR_ARITMETICO	4	11
5	NUMERO_ENTERO	4	13
;	DELIMITADOR	4	13
if	PALABRA_RESERVADA	6	5
(	DELIMITADOR	6	7
x	IDENTIFICADOR	6	9
>	OPERADOR_RELACIONAL	6	11
y	IDENTIFICADOR	6	13
)	DELIMITADOR	6	13
{	DELIMITADOR	6	15
x	IDENTIFICADOR	7	9
=	OPERADOR_ASIGNACION	7	11
x	IDENTIFICADOR	7	13
-	OPERADOR_ARITMETICO	7	15
1	NUMERO_ENTERO	7	17
;	DELIMITADOR	7	17
}	DELIMITADOR	8	4
else	PALABRA_RESERVADA	8	7
{	DELIMITADOR	8	11
y	IDENTIFICADOR	9	9
=	OPERADOR_ASIGNACION	9	11
y	IDENTIFICADOR	9	13
+	OPERADOR_ARITMETICO	9	15
1.0	NUMERO_FLOTANTE	9	17
;	DELIMITADOR	9	19
}	DELIMITADOR	10	4
while	PALABRA_RESERVADA	12	5
(	DELIMITADOR	12	10
x	IDENTIFICADOR	12	12
<	OPERADOR_RELACIONAL	12	14
100	NUMERO_ENTERO	12	16
)	DELIMITADOR	12	18
{	DELIMITADOR	12	20
x	IDENTIFICADOR	13	9
=	OPERADOR_ASIGNACION	13	11
x	IDENTIFICADOR	13	13
+	OPERADOR_ARITMETICO	13	15
1	NUMERO_ENTERO	13	17
;	DELIMITADOR	13	17
}	DELIMITADOR	14	4
return	IDENTIFICADOR	16	5
0	NUMERO_ENTERO	16	12
;	DELIMITADOR	16	12
}	DELIMITADOR	17	0
